shader GaussianUtil {
    float3x3 CalcMatrixFromRotationScale(float4 rot, float3 scale)
    {
        float3x3 ms = float3x3(
            scale.x, 0, 0,
            0, scale.y, 0,
            0, 0, scale.z
        );
        
        // For Stride, negate the z and w components of the quaternion
        float w = rot.x;
        float x = rot.y;
        float y = -rot.z;  // Negated for right-handed system
        float z = -rot.w;  // Negated for right-handed system
        
        float3x3 mr = float3x3(
            1-2*(y*y + z*z),   2*(x*y - w*z),   2*(x*z + w*y),
            2*(x*y + w*z), 1-2*(x*x + z*z),   2*(y*z - w*x),
            2*(x*z - w*y),   2*(y*z + w*x), 1-2*(x*x + y*y)
        );
        return mul(mr, ms);
    }

    float3 CalcCovariance3D(float3x3 rotMat, out float3 sigma1)
    {
        // Matrix multiplication remains the same as it's still valid in right-handed system
        float3x3 sig = mul(rotMat, transpose(rotMat));
        float3 sigma0 = float3(sig._m00, sig._m01, sig._m02);
        sigma1 = float3(sig._m11, sig._m12, sig._m22);
        return sigma0;
    }

    float3 CalcCovariance2D(float3 worldPos, float3 cov3d0, float3 cov3d1, float4x4 matrixV, float4x4 matrixP, float4 screenParams)
    {
        float4x4 viewMatrix = matrixV;
        
        // Negate Z of worldPos for right-handed system
        worldPos.z = -worldPos.z;
        float3 viewPos = mul(viewMatrix, float4(worldPos, 1)).xyz;

        float aspect = matrixP._m00 / matrixP._m11;
        float tanFovX = rcp(matrixP._m00);
        float tanFovY = rcp(matrixP._m11 * aspect);
        float limX = 1.3 * tanFovX;
        float limY = 1.3 * tanFovY;
        
        // Adjust for right-handed system
        viewPos.x = clamp(viewPos.x / viewPos.z, -limX, limX) * viewPos.z;
        viewPos.y = clamp(viewPos.y / viewPos.z, -limY, limY) * viewPos.z;

        float focal = screenParams.x * matrixP._m00 / 2;

        // Jacobian matrix adjusted for right-handed system
        float3x3 J = float3x3(
            focal / viewPos.z, 0, -(focal * viewPos.x) / (viewPos.z * viewPos.z),
            0, focal / viewPos.z, -(focal * viewPos.y) / (viewPos.z * viewPos.z),
            0, 0, 0
        );
        
        float3x3 W = (float3x3)viewMatrix;
        float3x3 T = mul(J, W);
        float3x3 V = float3x3(
            cov3d0.x, cov3d0.y, cov3d0.z,
            cov3d0.y, cov3d1.x, cov3d1.y,
            cov3d0.z, cov3d1.y, cov3d1.z
        );
        float3x3 cov = mul(T, mul(V, transpose(T)));

        cov._m00 += 0.3;
        cov._m11 += 0.3;
        return float3(cov._m00, cov._m01, cov._m11);
    }

    float2 DecomposeCovariance(float3 cov2d, out float2 v2)
    {
        // Decomposition math remains the same as it works in screen space
        float diag1 = cov2d.x, diag2 = cov2d.z, offDiag = cov2d.y;
        float mid = 0.5f * (diag1 + diag2);
        float radius = length(float2((diag1 - diag2) / 2.0, offDiag));
        float lambda1 = mid + radius;
        float lambda2 = max(mid - radius, 0.1);
        float2 diagVec = normalize(float2(offDiag, lambda1 - diag1));
        diagVec.y = -diagVec.y;
        float maxSize = 4096.0;
        float2 v1 = min(sqrt(2.0 * lambda1), maxSize) * diagVec;
        v2 = min(sqrt(2.0 * lambda2), maxSize) * float2(diagVec.y, -diagVec.x);
        return v1;
    }

    float3 DecodeDC(float3 dc) {
        // DC decoding remains the same as it's color space operation
        const float inv_sigmoid_factor = 1.0f / 0.6f;
        float3 decodedColor = (1.0f / (1.0f + exp(-dc * inv_sigmoid_factor))) - 0.5f;
        
        const float SH_C0 = 0.28209479177387814; // 1/sqrt(4Ï€)
        return decodedColor * SH_C0 * 2.0f;
    }
};